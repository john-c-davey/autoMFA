test_data[,4] = alloc
test_data = cbind(test_data, alloc)
pairs(test_data, lower.panel = NULL, col = my_cols[test_data[:,4]])
pairs(test_data, lower.panel = NULL, col = my_cols[test_data[,4]])
pairs(test_data[,1:3], lower.panel = NULL, col = my_cols[test_data[,4]])
names(test_data)
colnames(test_data) = c("t","v","u","a")
test_data
colnames(test_data)
pairs(test_data[,1:3], lower.panel = NULL, col = my_cols[test_data[,4]])
?pairs
?cat
iter <- stats::rpois(1, lambda = 10)
## print an informative message
cat("iteration = ", iter <- iter + 1, "\n")
cat
test_data = autoMFA::MFA_testdata
alloc = c(rep(1,412), rep(2,240), rep(3, 68))
#test_data = hcat(test_data,alloc)
my_cols <- c("#00AFBB", "#E7B800", "#FC4E07")
test_data = cbind(test_data, alloc)
if is.null(colnames(test_data)){
v_labels = paste("V",1:ncol(test_data),sep="")
}
paste("V",1:ncol(test_data),sep="")
if is.null(colnames(test_data)){
v_labels = paste("V",1:ncol(test_data),sep="")
}
if(is.null(colnames(test_data))){
v_labels = paste("V",1:ncol(test_data),sep="")
}
pairs(test_data[,1:3], lower.panel = NULL, col = my_cols[test_data[,4]], labels = v_labels)
install.packages("ggsci")
library(ggsci)
library(ggsci)
test_data = autoMFA::MFA_testdata
alloc = c(rep(1,412), rep(2,240), rep(3, 68))
#test_data = hcat(test_data,alloc)
my_cols <- pal_jco()(ncol(test_data))
test_data = cbind(test_data, alloc)
if(is.null(colnames(test_data))){
v_labels = paste("V",1:ncol(test_data),sep="")
}
pairs(test_data[,1:3], lower.panel = NULL, col = my_cols[test_data[,4]], labels = v_labels)
?factor()
methods(print)
?print.mfa
?plot.mfa
model <- mfa(iris[, -5], g=3, q=2, itmax=200, nkmeans=1, nrandom=5)
summary(model)
print(model)
?autoMFA
?amfa
?AMFA
#MFA model methods
RNGversion('4.0.3'); set.seed(3)
MFA.fit <- AMFA(autoMFA::MFA_testdata,3,3, nkmeans = 3, nrandom = 3, itmax = 100)
MFA.fit <- autoMFA::AMFA(autoMFA::MFA_testdata,3,3, nkmeans = 3, nrandom = 3, itmax = 100)
MFA.fit
class(MFA.fit)
class(MFA.fit) <- "MFA"
MFA.fit
summary.mfa
EMMIXMFA:::summary.mfa
EMMIXmfa:::summary.mfa
print(model)
summary(model)
?match.call
?match.call
?data.frame
data.frame(x = 1, y = 1:10, fac = fac)
L3 <- LETTERS[1:3]
fac <- sample(L3, 10, replace = TRUE)
(d <- data.frame(x = 1, y = 1:10, fac = fac))
RNGversion('4.0.3'); set.seed(3)
MFA.fit <- autoMFA::AMFA(autoMFA::MFA_testdata,3,3, nkmeans = 3, nrandom = 3, itmax = 100)
class(MFA.fit) <- "MFA"
summary.MFA <- function(x){
(data.frame("No. components" = length(x$model$pivec), "log_like" = x$diagnostics$logL, "BIC" = x$diagnostics$BIC))
print("Component specific number of factors:")
print(x$model$numFactors)
}
summary(MFA.fit)
MFA.fit$diagnostics
summary.MFA <- function(x){
(data.frame("No. components" = length(x$model$pivec), "log_like" = x$diagnostics$logL, "BIC" = x$diagnostics$bic))
print("Component specific number of factors:")
print(x$model$numFactors)
}
summary(MFA.fit)
summary.MFA <- function(x){
print(data.frame("No. components" = length(x$model$pivec), "log_like" = x$diagnostics$logL, "BIC" = x$diagnostics$bic))
print("Component specific number of factors:")
print(x$model$numFactors)
}
summary.MFA <- function(x){
print(data.frame("No. components" = length(x$model$pivec), "log_like" = x$diagnostics$logL, "BIC" = x$diagnostics$bic))
print("Component specific number of factors:")
print(x$model$numFactors)
}
summary(MFA.fit)
summary(model)
summary.MFA <- function(x){
print(data.frame("No components" = length(x$model$pivec), "log_like" = x$diagnostics$logL, "BIC" = x$diagnostics$bic))
print("Component specific number of factors:")
print(x$model$numFactors)
}
summary(MFA.fit)
iter <- stats::rpois(1, lambda = 10)
## print an informative message
cat("iteration = ", iter <- iter + 1, "\n")
summary.MFA <- function(x){
cat(data.frame("No components" = length(x$model$pivec), "log_like" = x$diagnostics$logL, "BIC" = x$diagnostics$bic),
"\n", "Component specific number of factors:", "\n",x$model$numFactors, "\n" )
#print(data.frame("No components" = length(x$model$pivec), "log_like" = x$diagnostics$logL, "BIC" = x$diagnostics$bic))
#print("Component specific number of factors:")
#print(x$model$numFactors)
}
summary(MFA.fit)
summary.MFA <- function(x){
print(data.frame("No components" = length(x$model$pivec), "log_like" = x$diagnostics$logL, "BIC" = x$diagnostics$bic))
cat("Component specific number of factors:", "\n",x$model$numFactors, "\n" )
#print(data.frame("No components" = length(x$model$pivec), "log_like" = x$diagnostics$logL, "BIC" = x$diagnostics$bic))
#print("Component specific number of factors:")
#print(x$model$numFactors)
}
summary(MFA.fit)
plot(model)
?echo
?echo?substitute
?substitute
model$call
?mfa
?VBMFA
?vbmfa
?AMFA.inc
?.Deprecated
.rs.rVersionString()
data(MFA_testdata)
plot(MFA_testdata[,1], MFA_testdata[,2])
data(autoMFA::MFA_testdata)
library(autoMFA)
MFA_testdata
plot(MFA_testdata[,1], MFA_testdata[,2])
cat(model$pivec)
MFA.fit
cat(MFA.fit.AMFA$model$B)
print(MFA.fit.AMFA$model$B)
?call
?paste0\
?paste0
devtools::document("~/Box/Project/Package/autoMFA");
devtools::document(paste0(boxpath, "~/Box/Project/Package/autoMFA"));
boxpath = "/Users/johndavey/Library/CloudStorage/Box-Box"
devtools::document(paste0(boxpath, "~/Box/Project/Package/autoMFA"));
devtools::document(paste0(boxpath, "/Project/Package/autoMFA"));
devtools::document(paste0(boxpath, "/Project/Packages/autoMFA"));
devtools::install(paste0(boxpath, "/Project/Packages/autoMFA"));
library(autoMFA)
.rs.restartR()
library(autoMFA)
?AMFA.inc
RNGversion('4.0.3'); set.seed(3)
MFA.fit <- AMFA.inc(autoMFA::MFA_testdata, itmax = 1, numTries = 0)
help("autoMFA-deprecated")
MFA.fit$diagnostics$call
summary(MFA.fit)
print(MFA.fit)
print.MFA <- function(x){
cat(x$diagnostics$call, "\n", "The mixing proportions are:", "\n")
print(x$model$pivec)
cat("The component means are:", "\n")
print(x$model$mu)
cat("The factor loading matrices are:", "\n")
print(x$model$B)
cat("The error variance matrices are:", "\n")
print(x$model$D)
}
print(MFA.fit)
plot(MFA.fit)
plot.MFA(data
plot.MFA(MFA.fit)
plot.MFA <- function(x){
my_col <- pal_jco()(ncol(x$diagnostics$data))
if(is.null(colnames(x$diagnostics$data))){
v_labels = paste("V",1:ncol(test_data),sep="")
}
pairs(x$diagnostics$data, lower.panel = NULL, col = my_cols[x$diagnostics$data], labels = v_labels)
}
plot.MFA(MFA.fit)
plot.MFA <- function(x){
my_col <- pal_jco()(ncol(x$diagnostics$data))
if(is.null(colnames(x$diagnostics$data))){
v_labels = paste("V",1:ncol(test_data),sep="")
}
pairs(x$diagnostics$data, lower.panel = NULL, col = my_cols[x$clustering$allocations], labels = v_labels)
}
plot.MFA(MFA.fit)
plot.MFA <- function(x){
my_col <- pal_jco()(ncol(x$diagnostics$data))
if(is.null(colnames(x$diagnostics$data))){
v_labels = paste("V",1:ncol(test_data),sep="")
}
pairs(x$diagnostics$data, lower.panel = NULL, col = my_col[x$clustering$allocations], labels = v_labels)
}
plot.MFA(MFA.fit)
plot.MFA <- function(x){
my_col <- pal_jco()(ncol(x$diagnostics$data))
if(is.null(colnames(x$diagnostics$data))){
v_labels = paste("V",1:ncol(test_data),sep="")
}
pairs(x$diagnostics$data, lower.panel = NULL, col = my_col[x$clustering$allocations], labels = v_labels)
}
x = MFA.fit
my_col <- pal_jco()(ncol(x$diagnostics$data))
my_col
.rs.restartR()
gc()
boxpath = "/Users/johndavey/Library/CloudStorage/Box-Box"
devtools::document(paste0(boxpath, "/Project/Packages/autoMFA"));
devtools::install(paste0(boxpath, "/Project/Packages/autoMFA"));
boxpath = "/Users/johndavey/Library/CloudStorage/Box-Box"
devtools::document(paste0(boxpath, "/Project/Packages/autoMFA"));
devtools::install(paste0(boxpath, "/Project/Packages/autoMFA"));
library(autoMFA)
?AMFA
RNGversion('4.0.3'); set.seed(3)
MFA.fit <- AMFA(autoMFA::MFA_testdata,3,3, nkmeans = 3, nrandom = 3, itmax = 100)
summary(MFA.fit)
print(MFA.fit)
plot(MFA.fit)
boxpath = "/Users/johndavey/Library/CloudStorage/Box-Box"
devtools::document(paste0(boxpath, "/Project/Packages/autoMFA"));
devtools::install(paste0(boxpath, "/Project/Packages/autoMFA"));
.rs.restartR()
library(autoMFA)
?AMFA
RNGversion('4.0.3'); set.seed(3)
MFA.fit <- AMFA(autoMFA::MFA_testdata,3,3, nkmeans = 3, nrandom = 3, itmax = 100)
MFA.fit
summary(MFA.fit)
boxpath = "/Users/johndavey/Library/CloudStorage/Box-Box"
devtools::document(paste0(boxpath, "/Project/Packages/autoMFA"));
devtools::install(paste0(boxpath, "/Project/Packages/autoMFA"));
.rs.restartR()
library(autoMFA)
RNGversion('4.0.3'); set.seed(3)
MFA.fit <- AMFA(autoMFA::MFA_testdata,3,3, nkmeans = 3, nrandom = 3, itmax = 100)
MFA.fit$diagnostics$call
summary(MFA.fit)
boxpath = "/Users/johndavey/Library/CloudStorage/Box-Box"
devtools::document(paste0(boxpath, "/Project/Packages/autoMFA"));
devtools::install(paste0(boxpath, "/Project/Packages/autoMFA"));
.rs.restartR()
library(autoMFA)
RNGversion('4.0.3'); set.seed(3)
MFA.fit <- AMFA(autoMFA::MFA_testdata,3,3, nkmeans = 3, nrandom = 3, itmax = 100)
summary(MFA.fit)
print(MFA.fit)
boxpath = "/Users/johndavey/Library/CloudStorage/Box-Box"
devtools::document(paste0(boxpath, "/Project/Packages/autoMFA"));
devtools::install(paste0(boxpath, "/Project/Packages/autoMFA"));
RNGversion('4.0.3'); set.seed(3)
MFA.fit <- AMFA(autoMFA::MFA_testdata,3,3, nkmeans = 3, nrandom = 3, itmax = 100)
summary(MFA.fit)
class(MFA.fit)
print(MFA.fit)
boxpath = "/Users/johndavey/Library/CloudStorage/Box-Box"
devtools::document(paste0(boxpath, "/Project/Packages/autoMFA"));
devtools::install(paste0(boxpath, "/Project/Packages/autoMFA"));
.rs.restartR()
library(R)
library(autoMFA)
RNGversion('4.0.3'); set.seed(3)
MFA.fit <- AMFA(autoMFA::MFA_testdata,3,3, nkmeans = 3, nrandom = 3, itmax = 100)
summary(MFA.fit)
##' @export summary.MFA
summary.MFA <- function(x){
cat(x$diagnostics$call)
print(data.frame("No components" = length(x$model$pivec), "log_like" = x$diagnostics$logL, "BIC" = x$diagnostics$bic))
cat("Component specific numbers of factors:", "\n",x$model$numFactors, "\n" )
}
##' @export plot.MFA
plot.MFA <- function(x){
my_col <- pal_jco()(ncol(x$diagnostics$data))
if(is.null(colnames(x$diagnostics$data))){
v_labels = paste("V",1:ncol(x$diagnostics$data),sep="")
}
pairs(x$diagnostics$data, lower.panel = NULL, col = my_col[x$clustering$allocations], labels = v_labels)
}
##' @export print.MFA
print.MFA <- function(x){
cat(x$diagnostics$call, "\n", "The mixing proportions are:", "\n")
print(x$model$pivec)
cat("The component means are:", "\n")
print(x$model$mu)
cat("The factor loading matrices are:", "\n")
print(x$model$B)
cat("The error variance matrices are:", "\n")
print(x$model$D)
}
RNGversion('4.0.3'); set.seed(3)
MFA.fit <- AMFA(autoMFA::MFA_testdata,3,3, nkmeans = 3, nrandom = 3, itmax = 100)
summary(MFA.fit)
print(MFA.fit)
plot(MFA.fit)
boxpath = "/Users/johndavey/Library/CloudStorage/Box-Box"
devtools::document(paste0(boxpath, "/Project/Packages/autoMFA"));
devtools::install(paste0(boxpath, "/Project/Packages/autoMFA"));
.rs.restartR()
boxpath = "/Users/johndavey/Library/CloudStorage/Box-Box"
devtools::document(paste0(boxpath, "/Project/Packages/autoMFA"));
devtools::install(paste0(boxpath, "/Project/Packages/autoMFA"));
boxpath = "/Users/johndavey/Library/CloudStorage/Box-Box"
devtools::document(paste0(boxpath, "/Project/Packages/autoMFA"));
devtools::install(paste0(boxpath, "/Project/Packages/autoMFA"));
.rs.restartR()
library(autoMFA)
?AMFA
RNGversion('4.0.3'); set.seed(3)
MFA.fit <- AMFA(autoMFA::MFA_testdata,3,3, nkmeans = 3, nrandom = 3, itmax = 100)
print(MFA.fit)
summary(MFA.fit)
plot(MFA.fit)
boxpath = "/Users/johndavey/Library/CloudStorage/Box-Box"
devtools::document(paste0(boxpath, "/Project/Packages/autoMFA"));
devtools::install(paste0(boxpath, "/Project/Packages/autoMFA"));
.rs.restartR()
boxpath = "/Users/johndavey/Library/CloudStorage/Box-Box"
devtools::document(paste0(boxpath, "/Project/Packages/autoMFA"));
devtools::install(paste0(boxpath, "/Project/Packages/autoMFA"));
.rs.restartR()
boxpath = "/Users/johndavey/Library/CloudStorage/Box-Box"
devtools::document(paste0(boxpath, "/Project/Packages/autoMFA"));
devtools::install(paste0(boxpath, "/Project/Packages/autoMFA"));
print("abc /n 123")
boxpath = "/Users/johndavey/Library/CloudStorage/Box-Box"
devtools::document(paste0(boxpath, "/Project/Packages/autoMFA"));
devtools::install(paste0(boxpath, "/Project/Packages/autoMFA"));
.rs.restartR()
library(autoMFA)
?AMFA_inc
RNGversion('4.0.3'); set.seed(3)
MFA.fit <- AMFA_inc(autoMFA::MFA_testdata, itmax = 1, numTries = 0)
summary(MFA.fit)
AMFA_inc(Y, numTries = 0, eta = 0.005,itmax = 1, tol = 1e-05
, conv_measure = diff, nkmeans = 1, nrandom = 1, varimax = FALSE)
AMFA_inc(Y, numTries = 0, eta = 0.005,itmax = 1, tol = 1e-05, conv_measure = diff, nkmeans = 1, nrandom = 1, varimax = FALSE)
Y
boxpath = "/Users/johndavey/Library/CloudStorage/Box-Box"
devtools::document(paste0(boxpath, "/Project/Packages/autoMFA"));
devtools::install(paste0(boxpath, "/Project/Packages/autoMFA"));
devtools::check(paste0(boxpath, "/Project/Packages/autoMFA"))
boxpath = "/Users/johndavey/Library/CloudStorage/Box-Box"
devtools::document(paste0(boxpath, "/Project/Packages/autoMFA"));
devtools::install(paste0(boxpath, "/Project/Packages/autoMFA"));
devtools::check(paste0(boxpath, "/Project/Packages/autoMFA"))
boxpath = "/Users/johndavey/Library/CloudStorage/Box-Box"
devtools::document(paste0(boxpath, "/Project/Packages/autoMFA"));
devtools::install(paste0(boxpath, "/Project/Packages/autoMFA"));
devtools::check(paste0(boxpath, "/Project/Packages/autoMFA"))
boxpath = "/Users/johndavey/Library/CloudStorage/Box-Box"
devtools::document(paste0(boxpath, "/Project/Packages/autoMFA"));
devtools::install(paste0(boxpath, "/Project/Packages/autoMFA"));
devtools::check(paste0(boxpath, "/Project/Packages/autoMFA"))
boxpath = "/Users/johndavey/Library/CloudStorage/Box-Box"
devtools::document(paste0(boxpath, "/Project/Packages/autoMFA"));
devtools::install(paste0(boxpath, "/Project/Packages/autoMFA"));
devtools::check(paste0(boxpath, "/Project/Packages/autoMFA"))
boxpath = "/Users/johndavey/Library/CloudStorage/Box-Box"
devtools::document(paste0(boxpath, "/Project/Packages/autoMFA"));
devtools::install(paste0(boxpath, "/Project/Packages/autoMFA"));
devtools::check(paste0(boxpath, "/Project/Packages/autoMFA"))
library(eRm)
?eRm
eRm::RM()
?eRm::RM
st = as.data.frame(state.x77);
colnames(st)[4] = "Life.Exp";
colnames(st)[6] = "HS.Grad";
st$Density = st$Population * 1000 / st$Area;
mlr = lm(formula = Life.Exp ~ ., data = st);
summary(mlr);
?saveRDS
?foreach
library(foreach)
?foreach
?doParallel
library(doParallel)
?registerDoParallel
5!
fact(5)
factorial(%)
factorial(5)
factorial(5)/factorial(6)*3*3*6*5/9*8*7
factorial(5)/factorial(6)*3*3*6*5/9/8/7
3*3*6*5/(9*8*7)
1*2*2*3*4*5/(factorial(6))
1*2*2*3*4*5/(factorial(6)) * (3*3*6*5/(9*8*7))
5/28
test = readRDS("/Users/johndavey/Library/CloudStorage/Box-Box/Project/Systematic_Comp/datasets_par/df_row401.rds")
test
pairs(data$Y
)
pairs(data$Y)
pairs(test$Y)
test = readRDS("/Users/johndavey/Library/CloudStorage/Box-Box/Project/Systematic_Comp/datasets_par/df_row402.rds")
test
test = readRDS("/Users/johndavey/Library/CloudStorage/Box-Box/Project/Systematic_Comp/datasets_par/df_row402.rds")
test
pairs(test$Y)
?usethis::use_data
x <- sample(1000)
usethis::use_data(x, mtcars)
setwd("~/Library/CloudStorage/Box-Box/Project/Packages/autoMFA")
use_data(test$Y, testdata)
use_this::use_data(test$Y, testdata)
usethis::use_data(test$Y, testdata)
usethis::use_data(testdata, autoMFA)
testdata = test$Y
usethis::use_data(testdata, autoMFA)
usethis::use_data(testdata)
test$pi
0.5722222 * 720
1/3*720
0.094444*720
boxpath = "/Users/johndavey/Library/CloudStorage/Box-Box"
devtools::document(paste0(boxpath, "/Project/Packages/autoMFA"));
boxpath = "/Users/johndavey/Library/CloudStorage/Box-Box"
devtools::document(paste0(boxpath, "/Project/Packages/autoMFA"));
boxpath = "/Users/johndavey/Library/CloudStorage/Box-Box"
devtools::document(paste0(boxpath, "/Project/Packages/autoMFA"));
testDataMFA = test$Y
usethis::use_data(testDataMFA)
boxpath = "/Users/johndavey/Library/CloudStorage/Box-Box"
devtools::document(paste0(boxpath, "/Project/Packages/autoMFA"));
.rs.restartR()
library(autoMFA)
?autoMFA::MFA_testdata
devtools::install(paste0(boxpath, "/Project/Packages/autoMFA"));
.rs.restartR()
library(autoMFA)
?autoMFA::testDataMFA
boxpath = "/Users/johndavey/Library/CloudStorage/Box-Box"
devtools::document(paste0(boxpath, "/Project/Packages/autoMFA"));
devtools::install(paste0(boxpath, "/Project/Packages/autoMFA"));
.rs.restartR()
library(autoMFA)
?testDataMFA
test$mu
test$D
test$B
boxpath = "/Users/johndavey/Library/CloudStorage/Box-Box"
devtools::document(paste0(boxpath, "/Project/Packages/autoMFA"));
devtools::install(paste0(boxpath, "/Project/Packages/autoMFA"));
.rs.restartR()
library(autoMFA)
?testDataMFA
2/9
pairs(testDataMFA)
amofa(testDataMFA)
AMFA(testDataMFA)
boxpath = "/Users/johndavey/Library/CloudStorage/Box-Box"
devtools::document(paste0(boxpath, "/Project/Packages/autoMFA"));
devtools::install(paste0(boxpath, "/Project/Packages/autoMFA"));
f=function(x,y){
p=match.call()
p
}
f(1,2)
f(x = 1, y = 2)
f(1,2)
f(x = test, y = 2)
boxpath = "/Users/johndavey/Library/CloudStorage/Box-Box"
devtools::document(paste0(boxpath, "/Project/Packages/autoMFA"));
devtools::install(paste0(boxpath, "/Project/Packages/autoMFA"));
install.packages(aricode)
install.packages('aricode)
install.packages('aricode')
boxpath = "/Users/johndavey/Library/CloudStorage/Box-Box"
devtools::document(paste0(boxpath, "/Project/Packages/autoMFA"));
devtools::install(paste0(boxpath, "/Project/Packages/autoMFA"));
boxpath = "/Users/johndavey/Library/CloudStorage/Box-Box"
devtools::document(paste0(boxpath, "/Project/Packages/autoMFA"));
devtools::install(paste0(boxpath, "/Project/Packages/autoMFA"));
?AMFA
.rs.restartR()
library(autoMFA)
?AMFA
RNGversion('4.0.3'); set.seed(3)
MFA.fit <- AMFA(testDataMFA,3,3, nkmeans = 3, nrandom = 3, itmax = 100)
print(MFA.fit)
boxpath = "/Users/johndavey/Library/CloudStorage/Box-Box"
devtools::document(paste0(boxpath, "/Project/Packages/autoMFA"));
devtools::install(paste0(boxpath, "/Project/Packages/autoMFA"));
.rs.restartR()
?AMFA
RNGversion('4.0.3'); set.seed(3)
MFA.fit <- AMFA(autoMFA::MFA_testdata,3,3, nkmeans = 3, nrandom = 3, itmax = 100)
RNGversion('4.0.3'); set.seed(3)
MFA.fit <- AMFA(autoMFA::testDataMFA,3,3, nkmeans = 3, nrandom = 3, itmax = 100)
print(MFA.fit)
boxpath = "/Users/johndavey/Library/CloudStorage/Box-Box"
devtools::document(paste0(boxpath, "/Project/Packages/autoMFA"));
devtools::install(paste0(boxpath, "/Project/Packages/autoMFA"));
.rs.restartR()
library(autoMFA)
RNGversion('4.0.3'); set.seed(3)
MFA.fit <- AMFA(autoMFA::MFA_testdata,3,3, nkmeans = 3, nrandom = 3, itmax = 100)
RNGversion('4.0.3'); set.seed(3)
MFA.fit <- AMFA(autoMFA::testDataMFA,3,3, nkmeans = 3, nrandom = 3, itmax = 100)
print(MFA.fit)
